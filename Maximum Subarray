class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n = nums.size();
        int curr_sum = 0, res = INT_MIN;
        for(int num : nums){
            curr_sum += num;
            if(curr_sum > 0)
                res = max(res, curr_sum);
            else{
                res = max(res, curr_sum);
                curr_sum = 0;
            }
        }
        return res;
    }
};

// Same idea but slight different implementation which is useful for Maximum Circular Subarray
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n = nums.size();
        if(n == 1) return nums[0];
        
        int curr_max = nums[0], res = nums[0];
        for(int i = 1; i < n; i++){
            curr_max = max(nums[i] + curr_max, nums[i]);
            res = max(res, curr_max);
        }
        return res;
    }
};
